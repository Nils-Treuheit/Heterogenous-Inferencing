# -*- coding: utf-8 -*-
"""ai_hardware_accelerators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14OARrQT11K7yKwr8FxhxIa6nYKvxRMfD

"""

import os, subprocess
current_dir = os.getcwd()
model_names = []

def create_tf_models():
  os.system("py -m pip uninstall tensorflow-gpu")
  os.system("py -m pip uninstall tensorflow")
  os.system("py -m pip uninstall tf-nightly")
  os.system("py -m pip uninstall keras")
  os.system("py -m pip install tensorflow-cpu==2.5.0")
  import tensorflow as tf

  BatchSize = 1 #512
  picture_shape = (128,128,3)
  linear_data_shape = (128)
  pictures = tf.keras.Input(shape=picture_shape, batch_size=BatchSize)
  linear_data = tf.keras.Input(shape=linear_data_shape, batch_size=BatchSize)
  models = []

  print("Create Simple Tensorflow Models")

  # relu activation model
  out = tf.keras.layers.Activation('relu')(linear_data)
  relu_act = tf.keras.Model(inputs=linear_data,
                          outputs=out,
                          name="relu_act")
  models.append(relu_act)
  for _ in range(2): out = tf.keras.layers.Activation('relu')(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="relu_act_stacked3"))
  for _ in range(5): out = tf.keras.layers.Activation('relu')(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="relu_act_stacked8"))

  # leaky relu activation model
  out = tf.keras.layers.LeakyReLU()(linear_data)
  leaky_relu_act = tf.keras.Model(inputs=linear_data,
                                  outputs=out,
                                  name="leaky_relu_act")
  models.append(leaky_relu_act)
  for _ in range(2): out = tf.keras.layers.LeakyReLU()(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="leaky_relu_act_stacked3"))
  for _ in range(5): out = tf.keras.layers.LeakyReLU()(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="leaky_relu_act_stacked8"))

  # tanh activation model
  out = tf.keras.layers.Activation('tanh')(linear_data)
  tanh_act = tf.keras.Model(inputs=linear_data,
                            outputs=out,
                            name="tanh_act")
  models.append(tanh_act)
  for _ in range(2): out = tf.keras.layers.Activation('tanh')(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="tanh_act_stacked3"))
  for _ in range(5): out = tf.keras.layers.Activation('tanh')(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="tanh_act_stacked8"))


  # sigmoid activation model
  out = tf.keras.layers.Activation('sigmoid')(linear_data)
  sigmoid_act = tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="sigmoid_act")
  models.append(sigmoid_act)
  for _ in range(2): out = tf.keras.layers.Activation('sigmoid')(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="sigmoid_act_stacked3"))
  for _ in range(5): out = tf.keras.layers.Activation('sigmoid')(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="sigmoid_act_stacked8"))

  # scalar_multiply model
  out = tf.keras.layers.Lambda(lambda x: x * 5.0)(linear_data)
  scalar_mult = tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="scalar_mult")
  models.append(scalar_mult)
  for _ in range(2): out = tf.keras.layers.Lambda(lambda x: x * 5.0)(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="scalar_mult_stacked3"))
  for _ in range(5): out = tf.keras.layers.Lambda(lambda x: x * 5.0)(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="scalar_mult_stacked8"))

  # small dense model
  out = tf.keras.layers.Dense(8)(linear_data)
  small_dense = tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="small_dense")
  models.append(small_dense)
  for _ in range(2): out = tf.keras.layers.Dense(8)(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="small_dense_stacked3"))
  for _ in range(5): out = tf.keras.layers.Dense(8)(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="small_dense_stacked8"))

  # big dense model
  out = tf.keras.layers.Dense(512)(linear_data)
  big_dense = tf.keras.Model(inputs=linear_data,
                             outputs=out,
                             name="big_dense")
  models.append(big_dense)
  for _ in range(2): out = tf.keras.layers.Dense(512)(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="big_dense_stacked3"))
  for _ in range(5): out = tf.keras.layers.Dense(512)(out)
  models.append(tf.keras.Model(inputs=linear_data,
                               outputs=out,
                               name="big_dense_stacked8"))

  # simple conv2d model
  out = tf.keras.layers.Conv2D(12,3)(pictures)
  simple_conv2d = tf.keras.Model(inputs=pictures,
                                 outputs=out,
                                 name="simple_conv2d")
  models.append(simple_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(12,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="simple_conv2d_stacked3"))
  for _ in range(5): out = tf.keras.layers.Conv2D(12,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="simple_conv2d_stacked8"))

  # dilated conv2d model
  out = tf.keras.layers.Conv2D(12,3,dilation_rate=2)(pictures)
  dilated_conv2d = tf.keras.Model(inputs=pictures,
                                  outputs=out,
                                  name="dilated_conv2d")
  models.append(dilated_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(12,3,dilation_rate=2)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="dilated_conv2d_stacked3"))
  for _ in range(5): out = tf.keras.layers.Conv2D(12,3,dilation_rate=2)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="dilated_conv2d_stacked8"))

  # strided conv2d model
  out = tf.keras.layers.Conv2D(12,3,strides=5)(pictures)
  strided_conv2d = tf.keras.Model(inputs=pictures,
                                  outputs=out,
                                  name="strided_conv2d")
  models.append(strided_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(12,3,strides=5)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="strided_conv2d_stacked3"))

  # big conv2d model
  out = tf.keras.layers.Conv2D(9,7)(pictures)
  big_conv2d = tf.keras.Model(inputs=pictures,
                              outputs=out,
                              name="big_conv2d")
  models.append(big_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(9,7)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="big_conv2d_stacked3"))
  for _ in range(5): out = tf.keras.layers.Conv2D(9,7)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="big_conv2d_stacked8"))

  # small conv2d model
  out = tf.keras.layers.Conv2D(9,3)(pictures)
  small_conv2d = tf.keras.Model(inputs=pictures,
                                outputs=out,
                                name="small_conv2d")
  models.append(small_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(9,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="small_conv2d_stacked3"))
  for _ in range(5): out = tf.keras.layers.Conv2D(9,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="small_conv2d_stacked8"))

  # many conv2d model
  out = tf.keras.layers.Conv2D(256,3)(pictures)
  many_conv2d = tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="many_conv2d")
  models.append(many_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(256,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="many_conv2d_stacked3"))
  for _ in range(5): out = tf.keras.layers.Conv2D(256,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="many_conv2d_stacked8"))

  # few conv2d model
  out = tf.keras.layers.Conv2D(3,3)(pictures)
  few_conv2d = tf.keras.Model(inputs=pictures,
                              outputs=out,
                              name="few_conv2d")
  models.append(few_conv2d)
  for _ in range(2): out = tf.keras.layers.Conv2D(3,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="few_conv2d_stacked3"))
  for _ in range(5): out = tf.keras.layers.Conv2D(3,3)(out)
  models.append(tf.keras.Model(inputs=pictures,
                               outputs=out,
                               name="few_conv2d_stacked8"))


  # convert and store models
  if not os.path.isdir("TF_Lite-Models"): os.mkdir("TF_Lite-Models")
  if not os.path.isdir("Tensor_Flow-Models"): os.mkdir("Tensor_Flow-Models")
  for model in models:
    model.summary()
    print("\n")
    model.save(("Tensor_Flow-Models/"+model.name))
    with open(("TF_Lite-Models/"+model.name+".tflite"), 'wb') as model_file:
      converter = tf.lite.TFLiteConverter.from_keras_model(model)
      tflite_model = converter.convert()
      model_file.write(tflite_model)
    with open(("TF_Lite-Models/"+model.name+"_int8.tflite"), 'wb') as model_file:
      tmp_shape = model.get_layer(index=0).input_shape[0]
      data_gen = lambda : (yield [tf.random.uniform(shape=tmp_shape,dtype=tf.dtypes.float32)])
      converter = tf.lite.TFLiteConverter.from_keras_model(model)
      converter.optimizations = [tf.lite.Optimize.DEFAULT]
      converter.inference_input_type = tf.int8
      converter.inference_output_type = tf.int8
      converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
      converter.representative_dataset = data_gen
      tflite_model = converter.convert()
      model_file.write(tflite_model) # save quantizized tf-lite models for Edge-TPU
    model_names.append(model.name)


def compile_openvino():
  os.system("py -m pip install tensorflow==2.4.0")
  os.system("py -m pip install openvino==2021.4")
  print("Compile Models for OpenVINO")

  openvino_dir = "C:/Program Files (x86)/Intel/openvino_2021.4.689/deployment_tools/model_optimizer"
  if not os.path.isdir("OpenVINO-Models"): os.mkdir("OpenVINO-Models")
  for model_name in model_names:
    result = subprocess.run(['py', openvino_dir+'/mo.py', '--framework', 'tf',
                             '--progress', '--input_model_is_text',
                             '--data_type=FP16', '--model_name', model_name, 
                             '--saved_model_dir', 
                             current_dir+'/Tensor_Flow-Models/'+model_name,
                             '--output_dir', current_dir+'/OpenVINO-Models'],
                            stdout=subprocess.PIPE)
    print(result.stdout.decode('ascii'))



def compile_edgetpu():
  print("Compile Models for Edge TPU")

  os.system('curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -')
  os.system('echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list')
  os.system('sudo apt-get update')
  os.system('sudo apt-get install edgetpu-compiler')

  if not os.path.isdir("Edge_TPU-Models"): os.mkdir("Edge_TPU-Models")

  filenames = ""
  for model_name in model_names:
    filenames += " "+current_dir+"/TF_Lite-Models/"+model_name+"_int8.tflite"
  result = subprocess.run(['edgetpu_compiler','-s','-o',
                           current_dir+'/Edge_TPU-Models',*filenames.split()],
                          stdout=subprocess.PIPE)
  print(result.stdout.decode('ascii'))



create_tf_models()
#compile_edgetpu()
compile_openvino()


